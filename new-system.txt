#!/usr/bin/env bash
# vim: ft=sh
#
# Install according to
# - https://wiki.archlinux.org/index.php/Installation_guide
# - https://wiki.archlinux.org/index.php/Systemd-boot
# use
# > pacstrap /mnt base vim wpa_supplicant btrfs-progs git

set -euo pipefail

declare -A ccodes=()
ccodes[white]=$(tput setaf 7)
ccodes[cyan]=$(tput setaf 6)
ccodes[magenta]=$(tput setaf 5)
ccodes[blue]=$(tput setaf 4)
ccodes[yellow]=$(tput setaf 3)
ccodes[green]=$(tput setaf 2)
ccodes[red]=$(tput setaf 1)
ccodes[black]=$(tput setaf 0)
ccodes[reset]=$(tput sgr0)
ccodes[bold]=$(tput bold)

info() {
  echo "${ccodes[bold]}${ccodes[white]}$*${ccodes[reset]}"
}

declare -A flags=()
flags[is_laptop]=0
flags[has_btrfs]=0

declare -A conf=()
conf[locale]=en_US.UTF-8
conf[keymap]=de
conf[user]="${1:-}"

info "Checking locale"
if ! grep "^${conf[locale]} UTF-8" /etc/locale.gen >/dev/null; then
  info "Generating ${conf[locale]} locale"
  echo "${conf[locale]} UTF-8" >> /etc/locale.gen
  locale-gen
fi

localectl status | grep "System Locale: LANG=${conf[locale]}" > /dev/null || {
  info "Setting system locale to ${conf[locale]}"
  localectl set-locale "LANG=${conf[locale]}"
}

localectl status | grep "VC Keymap: ${conf[keymap]}" > /dev/null || {
  info "Setting keymap to ${conf[keymap]}"
  localectl set-keymap "${conf[keymap]}"
}

info "Enable NTP for system clock"
timedatectl set-ntp true

info "Adding convinience defauls to /etc/profile.d/sane-defauls.sh"
cat>/etc/profile.d/sane-defauls.sh <<EOF
alias ls='ls --color=auto --group-directories-first'
alias ll='ls -al'
alias less='less -S'
alias v='vim'
alias vim='vim'
alias ..='cd ..'

export EDITOR=vim
EOF

info "Disable anoying speeper beep as termbell (blacklist module pcspkr)"
echo "blacklist pcspkr" > /etc/modprobe.d/nobeep.conf

info "Updating pacman databases"
pacman -Sy --noconfirm

pacman -Q reflector &> /dev/null || {
  info "Installing reflector to update pacmans mirrorlist"
  pacman -S --noconfirm reflector
}
info "Updating pacman mirrorlist"
reflector -c Germany -p https --age 12 --sort score -f 5 --save /etc/pacman.d/mirrorlist

info "Updating pacman databases again"
pacman -Sy --noconfirm

declare -a installPkgs=()
declare -a enableUnits=()

# This are the gnome packages from pacmans 'gnome'-group I want.
# Use pacman -Sgg gnome to see all the packages of group 'gnome'.
installPkgs+=(adwaita-icon-theme eog evince epiphany gdm gnome-backgrounds gnome-calculator gnome-control-center gnome-dictionary \
  gnome-disk-utility gnome-font-viewer gnome-keyring gnome-screenshot gnome-session gnome-settings-daemon gnome-shell \
  gnome-shell-extensions gnome-system-monitor gnome-terminal gnome-themes-standard gucharmap gvfs gvfs-mtp gvfs-smb \
  mousetweaks mutter nautilus networkmanager tracker tracker-miners xdg-user-dirs-gtk file-roller unrar p7zip)
enableUnits+=(gdm NetworkManager)

# install some additional packages
installPkgs+=(sudo gnome-tweak-tool openssh zsh mesa)

info "Checking for video drivers"
# Intel VGA, add nvidia and ati at some point
if vgahw=$(lspci -d 8086::0300) > /dev/null; then
  pkgs+=(vulkan-intel)
  info " => Found Intel graphics card, will install vulkan-intel"
  echo "    $vgahw"
fi

if btrfsPart=$(lsblk -o NAME,FSTYPE | grep btrfs); then
  info "Found $btrfsPart, will install btrfs-progs"
  installPkgs+=(btrfs-progs)
  flags[has_btrfs]=1
fi

# check if running on laptop, if so install tlp
if hostnamectl | grep "Chassis: laptop" &>/dev/null; then
  info "Detected a laptop, will install TLP"
  installPkgs+=(tlp)
  enableUnits+=(tlp)
  flags[is_laptop]=1
fi

# check if systemd-boot is used, if so install systemd-boot-pacman-hook
if bootctl status &> /dev/null; then
  info "EFI detected, assuming systemd-boot is used, adding pacman hook"
  [[ -d /etc/pacman.d/hooks ]] || mkdir -p /etc/pacman.d/hooks
cat>/etc/pacman.d/hooks/systemd-boot.hook <<EOF
[Trigger]
Type = Package
Operation = Upgrade
Target = systemd

[Action]
Description = Updating systemd-boot...
When = PostTransaction
Exec = /usr/bin/bootctl update
EOF
fi

if grep "vendor_id.*GenuineIntel" /proc/cpuinfo &>/dev/null; then
  info "Detected Intel CPU, will install intel-ucode"
  installPkgs+=(intel-ucode)
  info "############################################"
  info " Don't forget to add"
  info "   initrd /intel-ucode.img"
  info " to /boot/loader/entries/*.conf"
  info "############################################"
fi

info "Installing packages"
pacman -S --needed --noconfirm ${installPkgs[@]} 2>&1 | grep -v "^warning: .* -- skipping"

for unit in "${enableUnits[@]}"; do
  if ! systemctl is-enabled "$unit" &>/dev/null; then
    info "Enabling systemd unit $unit"
    systemctl enable "$unit"
  fi
done

info "Adding rule to sudoers.d to allow sudo access for users of group 'wheel'"
echo '%wheel ALL=(ALL) ALL' > /etc/sudoers.d/allow-wheel
echo 'Defaults passwd_timeout=0' > /etc/sudoers.d/timeout
chmod 0440 /etc/sudoers.d/*
info "Checking sudo conf"
visudo -c -s

if [[ -n ${conf[user]} ]] && ! getent passwd "${conf[user]}" >/dev/null; then
  info "Adding user ${conf[user]}"
  useradd -m -G users,wheel -s /usr/bin/zsh "${conf[user]}"
  passwd "${conf[user]}"
fi

if [[ -f "$(dirname "${BASH_SOURCE[0]}")/install-apps" ]]; then
  "$(dirname "${BASH_SOURCE[0]}")/install-apps" term gnome fonts browser media dev
else
  info "Clone dotfiles repo and run"
  info "  install-apps term gnome fonts browser media dev"
fi

# See https://wiki.archlinux.org/index.php/TLP#Btrfs
if [[ ${flags[is_laptop]} == 1 ]] && [[ ${flags[has_btrfs]} == 1 ]] ; then
  info "Changing TLP SATA_LINKPWR_ON_BAT to max_performace"
  sed -i -e 's/SATA_LINKPWR_ON_BAT=.*/SATA_LINKPWR_ON_BAT=max_performace/g' /etc/default/tlp 
fi
